/* ====================================== */
/* Copyright (c) 2007 Unisys Corporation. */
/*          All rights reserved.          */
/*          UNISYS CONFIDENTIAL           */
/* ====================================== */

package com.unisys.trans.logistics.lms.utils.dto;

import com.unisys.trans.logistics.lms.framework.dto.AbstractRequest;
import com.unisys.trans.logistics.lms.framework.utility.ContractUtility;

import java.util.ArrayList;
import java.util.List;

/**
 * <code>TerminalAreaPersistRequest</code> is used for creating and updating the <code>Terminal</code>,
 * <code>TerminalArea</code> and <code>TerminalLocation</code>.
 * <p>
 * This contains the following attributes:<br>
 * <code>
 * <ul>
 * <li>areaNameIdentifier
 * <li>inputLocationNames
 * <li>rangeIndicator
 * <li>terminal
 * </ul>
 * </code>
 */
public class TerminalAreaPersistRequest extends AbstractRequest {

    /**
     * Unique serial version UID.
     */
    private static final long serialVersionUID = 5761391273447842509L;

    /**
     * Attribute to hold the <code>areaNameIdentifier</code> property.
     */
    private String areaNameIdentifier;

    /**
     * Attribute to hold the <code>inputLocationNames</code> property.
     */
    private List<String> inputLocationNames;

    /**
     * Attribute to hold the <code>rangeIndicator</code> property.
     */
    private boolean rangeIndicator;

    /**
     * Attribute to hold the <code>terminal</code> property.
     */
    private TerminalDto terminal;

    /**
     * <code>Default constructor.</code>
     */
    public TerminalAreaPersistRequest() {

    }

    /**
     * Gets the <code>areaNameIdentifier</code> property.
     * <p>
     * Identifier which decided what data to display to the user on creation of new terminal area.
     * <p>
     * There are two scenarios possible:
     * <p>
     * <ul>
     * <li>When the area name identifier is left blank and new area is created all the terminal areas within
     * the terminal as displayed to user along with the newly created.
     * <li>When the area name identifier is entered and a new area is created only the newly created area
     * would be displayed to the user. area.
     * </ul>
     * <p>
     * <b>Format: </b><br>
     * 1-7 Alpha Numeric
     * <p>
     * <b>Example: </b><br>
     * 2AREA
     * <p>
     * 
     * @return the current value of the <code>areaNameIdentifier</code> property.
     */
    public String getAreaNameIdentifier() {
        return this.areaNameIdentifier;
    }

    /**
     * Gets the <code>inputLocationNames</code> property.
     * <p>
     * This field holds the list of terminal location names. If any of the field has a hyphen in it, the
     * inputs are considered to be range input and a range of location names are generated by a routine. For
     * example: <br>
     * If the input location names has the following list elements, A-B, CDE and D-E, a name generation
     * routine is invoked and the location names namely ACDED, ACDEE, BCDED and BCDEE are generated.
     * <p>
     * 
     * @return the current value of the <code>inputLocationNames</code> property.
     */
    public List<String> getInputLocationNames() {
        return this.inputLocationNames;
    }

    /**
     * Gets the <code>terminal</code> property.
     * <p>
     * 
     * @return the current value of the <code>terminal</code> property.
     */
    public TerminalDto getTerminal() {
        return this.terminal;
    }

    /**
     * Gets the <code>rangeIndicator</code> property.
     * <p>
     * This indicator is set if the input location names contain a hyphen.
     * <p>
     * <b>Possible Values: </b><br>
     * <code>true</code> - If the location name is a range value.<br>
     * <code>false</code> - If the location name is not a range value.<br>
     * <p>
     * 
     * @return the current value of the <code>rangeIndicator</code> property.
     */
    public boolean isRangeIndicator() {
        return this.rangeIndicator;
    }

    /**
     * Sets the <code>areaNameIdentifier</code> property.
     * <p>
     * Identifier which decided what data to display to the user on creation of new terminal area.
     * <p>
     * There are two scenarios possible:
     * <p>
     * 1. When the area name identifier is left blank and new area is created all the terminal areas within
     * the terminal as displayed to user along with the newly created.<br>
     * 2. When the area name identifier is entered and a new area is created only the newly created area would
     * be displayed to the user.
     * <p>
     * <b>Format: </b><br>
     * 1-7 Alpha Numeric
     * <p>
     * <b>Example: </b><br>
     * 2AREA
     * <p>
     * 
     * @param pAreaNameIdentifier the new value of the <code>areaNameIdentifier</code> property.
     */
    public void setAreaNameIdentifier(final String pAreaNameIdentifier) {
        this.areaNameIdentifier = ContractUtility.convertToUpperCase(pAreaNameIdentifier);
    }

    /**
     * Sets the <code>inputLocationNames</code> property.
     * <p>
     * This field holds the list of terminal location names. If any of the field has a hyphen in it, the
     * inputs are considered to be range input and a range of location names are generated by a routine. For
     * example: <br>
     * If the input location names has the following list elements, A-B, CDE and D-E, a name generation
     * routine is invoked and the location names namely ACDED, ACDEE, BCDED and BCDEE are generated.
     * <p>
     * 
     * @param pinputLocationNames the new value of the <code>inputLocationNames</code> property.
     */
    public void setInputLocationNames(final List<String> pinputLocationNames) {
        this.inputLocationNames = new ArrayList<String>();
        for (final String aLocationName : pinputLocationNames) {
            this.getInputLocationNames().add(ContractUtility.convertToUpperCase(aLocationName));
        }
    }

    /**
     * Gets the <code>rangeIndicator</code> property.
     * <p>
     * This indicator is set if the input location names contain a hyphen.
     * <p>
     * <b>Possible Values: </b><br>
     * <code>true</code> - If the location name is a range value.<br>
     * <code>false</code> - If the location name is not a range value.<br>
     * <p>
     * 
     * @param pRangeIndicator the new value of the <code>rangeIndicator</code> property.
     */
    public void setRangeIndicator(final boolean pRangeIndicator) {
        this.rangeIndicator = pRangeIndicator;
    }

    /**
     * Sets the <code>terminal</code> property.
     * <p>
     * 
     * @param pTerminalDto the new value of the <code>terminal</code> property.
     */
    public void setTerminal(final TerminalDto pTerminalDto) {

        this.terminal = pTerminalDto;
    }

}
